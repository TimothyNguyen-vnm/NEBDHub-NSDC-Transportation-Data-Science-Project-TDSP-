# Motor Vehicle Collisions Analysis - NYC

## Step 1: Import Libraries and Mount Drive
```python
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import folium

from google.colab import drive
drive.mount('/content/drive')
```

## Step 2: Load Dataset
```python
data = pd.read_csv("/content/drive/MyDrive/Motor_Vehicle_Collisions_-_Crashes_20241229.csv")
data.head()
```

## Step 3: Descriptive Statistics and Missing Values
```python
desc_stats = data.describe()

# Check for missing values
missing_values = data.isnull().sum()
missing_values_percentage = (missing_values / len(data)) * 100
missing_data = pd.DataFrame({'Missing Values': missing_values, 'Percentage (%)': missing_values_percentage})
missing_data.sort_values(by='Percentage (%)', ascending=False)
```

## Step 4: Top 10 Contributing Factors
```python
top_factors = data['CONTRIBUTING FACTOR VEHICLE 1'].value_counts().head(10)
plt.figure(figsize=(12, 7))
sns.barplot(x=top_factors.index, y=top_factors.values, palette="magma")
plt.title('Top 10 Contributing Factors to Crashes')
plt.xlabel('Contributing Factors')
plt.ylabel('Number of Crashes')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()
```

## Step 5: Top Vehicle Types Involved
```python
top_vehicle_types = data['VEHICLE TYPE CODE 1'].value_counts().head(10)
plt.figure(figsize=(12, 7))
sns.barplot(x=top_vehicle_types.index, y=top_vehicle_types.values, palette="cividis")
plt.title('Top 10 Vehicle Types Involved in Crashes')
plt.xlabel('Vehicle Type')
plt.ylabel('Number of Crashes')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()
```

## Step 6: Types of Injuries and Deaths
```python
types_of_crashes = {
    'Pedestrian Injuries': data['NUMBER OF PEDESTRIANS INJURED'].sum(),
    'Cyclist Injuries': data['NUMBER OF CYCLIST INJURED'].sum(),
    'Motorist Injuries': data['NUMBER OF MOTORIST INJURED'].sum(),
    'Pedestrian Deaths': data['NUMBER OF PEDESTRIANS KILLED'].sum(),
    'Cyclist Deaths': data['NUMBER OF CYCLIST KILLED'].sum(),
    'Motorist Deaths': data['NUMBER OF MOTORIST KILLED'].sum()
}
crash_types_df = pd.DataFrame(list(types_of_crashes.items()), columns=['Crash Type', 'Count'])
plt.figure(figsize=(12, 7))
sns.barplot(x='Count', y='Crash Type', data=crash_types_df, palette="mako")
plt.title('Types of Crashes and Their Frequencies')
plt.tight_layout()
plt.show()
```

## Step 7: Crashes by Hour of Day
```python
data['CRASH DATE'] = pd.to_datetime(data['CRASH DATE'])
data['CRASH TIME'] = pd.to_datetime(data['CRASH TIME'], format='%H:%M')
data['Hour of Day'] = data['CRASH TIME'].dt.hour
average_crashes_per_hour = data.groupby('Hour of Day').size() / data['Hour of Day'].nunique()
plt.figure(figsize=(12, 6))
sns.barplot(x=average_crashes_per_hour.index, y=average_crashes_per_hour.values)
plt.title('Average Number of Crashes per Hour')
plt.xlabel('Hour of Day')
plt.ylabel('Average Crashes')
plt.xticks(range(0, 24))
plt.show()
```

## Step 8: Monthly Crash Trends
```python
monthly_crashes = data.groupby(data['CRASH DATE'].dt.to_period("M")).size()
plt.figure(figsize=(15, 7))
monthly_crashes.plot()
plt.title('Number of Crashes per Month')
plt.xlabel('Date')
plt.ylabel('Number of Crashes')
plt.tight_layout()
plt.show()
```

## Step 9: Daily Crashes and Decomposition
```python
from statsmodels.tsa.seasonal import seasonal_decompose
daily_crashes = data.groupby('CRASH DATE').size()
plt.figure(figsize=(15, 6))
plt.plot(daily_crashes.index, daily_crashes.values)
plt.title('Daily Motor Vehicle Collisions in NYC')
plt.xlabel('Date')
plt.ylabel('Number of Crashes')
plt.show()

# Decompose time series
decomposition = seasonal_decompose(daily_crashes, model='additive', period=365)
fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(15, 12))
decomposition.trend.plot(ax=ax1); ax1.set_title('Trend')
decomposition.seasonal.plot(ax=ax2); ax2.set_title('Seasonal')
decomposition.resid.plot(ax=ax3); ax3.set_title('Residuals')
plt.tight_layout()
plt.show()
```

## Step 10: Crashes by Borough
```python
borough_count = data['BOROUGH'].value_counts()
plt.figure(figsize=(12, 7))
sns.barplot(x=borough_count.index, y=borough_count.values, palette="viridis")
plt.title('Crashes by Borough')
plt.xlabel('Borough')
plt.ylabel('Number of Crashes')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
```

## Step 11: Crash Location Heatmap
```python
from folium.plugins import HeatMap
data_geo = data.dropna(subset=['LATITUDE', 'LONGITUDE'])
m = folium.Map(location=[40.730610, -73.935242], zoom_start=10)
heat_data = [[row['LATITUDE'], row['LONGITUDE']] for index, row in data_geo.iterrows()]
HeatMap(heat_data, radius=8, max_zoom=13).add_to(m)
m.save("Heatmap.html")
```

## Step 12: Crash Severity Map
```python
sample_data_severity = data_geo.sample(n=1000, random_state=42)
m_severity = folium.Map(location=[40.730610, -73.935242], zoom_start=10)
for index, row in sample_data_severity.iterrows():
    if row['NUMBER OF PERSONS KILLED'] > 0:
        color = 'red'
        folium.features.RegularPolygonMarker(location=[row['LATITUDE'], row['LONGITUDE']], number_of_sides=3, radius=5, color=color, fill=True, fill_color=color).add_to(m_severity)
    elif row['NUMBER OF PERSONS INJURED'] > 0:
        color = 'orange'
        folium.CircleMarker(location=[row['LATITUDE'], row['LONGITUDE']], radius=5, color=color, fill=True, fill_color=color).add_to(m_severity)
    else:
        color = 'blue'
        folium.features.RegularPolygonMarker(location=[row['LATITUDE'], row['LONGITUDE']], number_of_sides=4, radius=5, color=color, fill=True, fill_color=color).add_to(m_severity)
m_severity.save("severity.html")
```

## Step 13: Crash Frequency by Day of Week
```python
data['Day of Week'] = data['CRASH DATE'].dt.day_name()
daily_crashes = data.groupby('Day of Week').size()
daily_injuries = data.groupby('Day of Week')['NUMBER OF PERSONS INJURED'].sum()
daily_fatalities = data.groupby('Day of Week')['NUMBER OF PERSONS KILLED'].sum()

plt.figure(figsize=(15, 6))
sns.barplot(x=daily_crashes.index, y=daily_crashes.values, palette='viridis')
plt.title('Crashes by Day of Week')
plt.xlabel('Day')
plt.ylabel('Number of Crashes')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Optional outputs
print("\nCrashes by day:\")
print(daily_crashes.sort_values(ascending=False))
print("\nInjuries by day:\")
print(daily_injuries.sort_values(ascending=False))
print("\nFatalities by day:\")
print(daily_fatalities.sort_values(ascending=False))
